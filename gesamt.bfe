%{
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "opdefs.h"
#include "asmprint.h"
#include "tree.h"

%}

%start stmt
%term OP_STMT=1 OP_NUM=2 OP_ID=3 OP_ADD=4 OP_MULT=5 OP_MINUS=6 OP_RET=7 OP_ARRAY_ACCESS=8 OP_GT=9 OP_NEQ=10 OP_IF=11 OP_DEFINITION=12 OP_ASSIGNMENT=13

%%

stmt: OP_RET(directValue) # 1 # print_return_direct(bnode);
stmt: OP_RET(regValue) # 1 # print_return_reg(bnode);


stmt: OP_GT(directValue, directValue) # 0 # print_comparison_gt_direct_direct(bnode);
stmt: OP_GT(directValue, regValue) # 1 # print_comparison_gt_direct_reg(bnode);
stmt: OP_GT(regValue, directValue) # 1 # print_comparison_gt_reg_direct(bnode);
stmt: OP_GT(regValue, regValue) # 2 # print_comparison_gt_reg_reg(bnode);

stmt: OP_NEQ(directValue, directValue) # 0 # print_comparison_neq_direct_direct(bnode);
stmt: OP_NEQ(directValue, regValue) # 1 # print_comparison_neq_direct_reg(bnode);
stmt: OP_NEQ(regValue, directValue) # 1 # print_comparison_neq_reg_direct(bnode);
stmt: OP_NEQ(regValue, regValue) # 2 # print_comparison_neq_reg_reg(bnode);

stmt: OP_DEFINITION(directValue) # 1 # print_def_direct(bnode);
stmt: OP_DEFINITION(regValue) # 1 # print_def_reg(bnode);

stmt: OP_ASSIGNMENT(regAddr, directValue) # 1 # print_write_to_array_from_direct(bnode);
stmt: OP_ASSIGNMENT(regAddr, regValue) # 1 # print_write_to_array_from_reg(bnode);
stmt: OP_ASSIGNMENT(regValue, directValue) # 1 # print_write_to_var_from_direct(bnode);
stmt: OP_ASSIGNMENT(regValue, regValue) # 1 # print_write_to_var_from_reg(bnode);

directValue: num # 0
directValue: OP_ADD(directValue, directValue) # 0 # bnode->value = bnode->left->value + bnode->right->value;
directValue: OP_MULT(directValue, directValue) # 0 # bnode->value = bnode->left->value * bnode->right->value;
directValue: OP_MINUS(directValue, directValue) # 0 # bnode->value = bnode->left->value * bnode->right->value;

regValue: id # 0

regValue: OP_ARRAY_ACCESS(id, directValue) # 2 # bnode->value = print_load_array_direct_index(bnode->left, bnode->right);
regValue: OP_ARRAY_ACCESS(id, regValue) # 2 # bnode->value = print_load_array_reg_index(bnode->left, bnode->right);

regAddr: OP_ARRAY_ACCESS(id, directValue) # 1 # bnode->value = print_load_array_addr_direct_index(bnode->left, bnode->right);
regAddr: OP_ARRAY_ACCESS(id, regValue) # 1 # bnode->value = print_load_array_addr_reg_index(bnode->left, bnode->right);

regValue: OP_ADD(directValue, regValue) # 1 # bnode->value = print_add_direct_reg(bnode->right, bnode->left);
regValue: OP_ADD(regValue, directValue) # 1 # bnode->value = print_add_direct_reg(bnode->left, bnode->right);
regValue: OP_ADD(regValue, directValue) # 1 # bnode->value = print_add_direct_reg(bnode->left, bnode->right);
regValue: OP_ADD(regValue, regValue) # 2 # bnode->value = print_add_reg_reg(bnode->left, bnode->right);

regValue: OP_MULT(directValue, regValue) # 1 # bnode->value = print_mult_direct_reg(bnode->right, bnode->left);
regValue: OP_MULT(regValue, directValue) # 1 # bnode->value = print_mult_direct_reg(bnode->left, bnode->right);
regValue: OP_MULT(regValue, directValue) # 1 # bnode->value = print_mult_direct_reg(bnode->left, bnode->right);
regValue: OP_MULT(regValue, regValue) # 2 # bnode->value = print_mult_reg_reg(bnode->left, bnode->right);

regValue: OP_MINUS(directValue, regValue) # 1 # bnode->value = print_mult_direct_reg(bnode->right, bnode->left);

num: OP_NUM  # 0
id: OP_ID # 0

%%

extern int yyparse(void);
void burm_reduce(NODEPTR_TYPE bnode, int goalnt);

void invoke_burm(NODEPTR_TYPE root) {
	burm_label(root);
	burm_reduce(root, 1);
}
